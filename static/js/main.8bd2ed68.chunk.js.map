{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","mining","setMining","allJokes","setAllJokes","currentJoke","useRef","jokes","setJokes","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllJokes","provider","ethers","providers","Web3Provider","signer","getSigner","jokePortalContract","Contract","getTotalJokes","count","toNumber","jokesCleaned","forEach","joke","push","address","joker","timestamp","Date","message","connectWallet","alert","text","current","value","jokeTxn","wait","hash","useEffect","className","onClick","ref","placeholder","disabled","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8bd2ed68.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport './App.css';\r\nimport abi from './utils/WaveFolder.json';\r\n\r\nexport default function App() {\r\n\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [mining, setMining] = useState(false);\r\n  const [allJokes, setAllJokes] = useState([]);\r\n  const currentJoke = useRef();\r\n  const [jokes, setJokes] = useState(0);\r\n  const contractAddress = \"0x1Ae4462705F2c54aADDF6c62f1254efc452BF38A\";\r\n  const contractABI = abi.abi;\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if(ethereum) {\r\n        console.log(\"Ethereum object present: \", ethereum);\r\n      } else {\r\n        console.log(\"Please connect to metamask\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\"});\r\n\r\n      if(accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found account: \", account);\r\n        setCurrentAccount(account)\r\n      } else {\r\n        console.log(\"No authorized accounts found.\");\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const getAllJokes =  async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const jokePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        let count = await jokePortalContract.getTotalJokes();\r\n        let jokes = await jokePortalContract.getAllJokes();\r\n        setJokes(count.toNumber());\r\n        let jokesCleaned = [];\r\n        jokes.forEach(joke => {\r\n          jokesCleaned.push({\r\n            address: joke.joker,\r\n            timestamp: new Date(joke.timestamp * 1000),\r\n            message: joke.message\r\n          });\r\n        });\r\n        setAllJokes(jokesCleaned);\r\n        console.log(\"retrived total count from contract: \", count.toNumber());\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist\");\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if(!ethereum) {\r\n        alert(\"Get Metamask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\"});\r\n      console.log(\"Connected: \", accounts[0]);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const joke =  async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      const text = currentJoke.current.value;\r\n      \r\n      if(text===\"\") {\r\n        alert(\"Enter a joke.\");\r\n        return;\r\n      }\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const jokePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        \r\n        const jokeTxn = await jokePortalContract.joke(text);\r\n        setMining(true);\r\n        await jokeTxn.wait();\r\n        setMining(false);\r\n        console.log(jokeTxn.hash);\r\n        alert(\"saved your joke!\");\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist\");\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  useEffect( () => {\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n  \r\n  return (\r\n    <div className=\"mainContainer\">\r\n\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n        ðŸ‘‹ Hey there!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n        I'm Shivansh. Tell me something funny and you might win a few ETH ðŸ‘€!\r\n        </div>\r\n\r\n        <button className=\"waveButton\" onClick={getAllJokes}>\r\n          See all jokes\r\n        </button>\r\n\r\n        <br/>\r\n        <input ref={currentJoke} placeholder=\"Make me laugh!\"></input>\r\n        <button className=\"waveButton\" onClick={joke} disabled={mining}>\r\n          Crack a joke!\r\n        </button>\r\n\r\n        <h4>Total number of jokes cracked are: {jokes}</h4>\r\n\r\n        {\r\n          !currentAccount && (\r\n            <button className=\"waveButton\" onClick={connectWallet}>\r\n              Connect Wallet\r\n            </button>\r\n          )\r\n        }\r\n\r\n        {allJokes.map((joke, index) => {\r\n          return (\r\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\r\n              <div>Address: {joke.address}</div>\r\n              <div>Time: {joke.timestamp.toString()}</div>\r\n              <div>Message: {joke.message}</div>\r\n            </div>)\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}